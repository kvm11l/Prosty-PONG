/* autogenerated by Processing revision 1282 on 2022-05-18 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class Kamil_Polacik extends PApplet {

int x;
int y;
int w;
int h;
int speedX;
int speedY;

int paletkaXL, paletkaYL, paletkaW, paletkaH, paletkaS;
int paletkaXR, paletkaYR;
boolean upL;
boolean downL;
boolean upR;
boolean downR;

int wynikL=0;
int wynikR=0;
int koniec=2;

 public void setup(){
  /* size commented out by preprocessor */;
  background(0);
  x = width/2;
  y = height/2;
  w=50;
  h=50;
  speedX=2;
  speedY=3;
  textSize(30);                // zwiekszenie czcionki tekstu
  textAlign(CENTER,CENTER);    // wyrownanie wyswietlanego tekstu
  rectMode(CENTER);            // tworzenie pilki na srodku
  paletkaXL = 30;      
  paletkaYL = height/2;        // to bylo lewa paletka
  
  paletkaXR = width-30;        // prawa paletka
  paletkaYR = height/2;
  
  paletkaW = 30;
  paletkaH = 100;
  paletkaS = 5;
}

 public void draw (){
  background(0);          // dodanie tego backgroundu usuwa "smuge" za pilka
  pilka();                // wywolania metod
  odbijanie();
  ruchPilki();
  Paletki();
  ruchPaletka();
  restrictPaletka();
  odbiciaPaletka();
  wynik();
  koncowyWynik();
}

 public void pilka(){            // metoda tworzaca pilke
  fill(200,200,200);
  ellipse(x,y,w,h);      
}

 public void ruchPilki(){
  x = x + speedX;      // ruch pilki poziomy
  y = y + speedY;      // ruch pilki pionowy
}



 public void odbijanie(){        // odbijanie sie pilki od krawedzi
    if(x> width-w/2){
  setup();                // po przekroczeniu prawej krawedzi pilka od nowa sie pojawia 
  speedX =-speedX;        // odbicie pilki od prawej krawedzi
  wynikL=wynikL+1;        // po dotkniecu krawedzi zalicza punkt
  } 
  else if(x<0+w/2){          // odbicie pilki od lewej krawedzi, przez dodanie szerkosci/2 pilka odbija sie krawedzia a nie srodkiem (skad jest rysowana) 
   setup();                  // po przekroczeniu lewej krawedzi pilka od nowa sie pojawia
   wynikR=wynikR+1;
  }
  
  if(y>height-h/2){      // odbicie pilki od dolnej krawedzi
  speedY=-speedY; 
  }
  
  else if(y<0+h/2){      // odbicie pilki od gornej krawedzi
   speedY=-speedY; 
  }
}

 public void Paletki(){
  fill(255,255,200);            // rysowanie pierwszej paletki
  rect(paletkaXL,paletkaYL,paletkaW,paletkaH);
  fill(0,255,0);                // rysowanie drugiej paletki
  rect(paletkaXR,paletkaYR,paletkaW,paletkaH);
}

 public void ruchPaletka(){                      // ruchy paletkami
   if(upL){                              // lewa
    paletkaYL= paletkaYL-paletkaS; 
   }
   if(downL){
    paletkaYL= paletkaYL+paletkaS; 
   }
      if(upR){                          // prawa
    paletkaYR= paletkaYR-paletkaS; 
   }
   if(downR){
    paletkaYR= paletkaYR+paletkaS; 
   }
}

 public void restrictPaletka(){                    // metoda zeby paletki nie uciekaly poza obszar
  if(paletkaYL-paletkaH/2 <0){             // nie moze uciec poza gorna krawedz ekranu
   paletkaYL= paletkaYL + paletkaS; 
  }
  if(paletkaYL+paletkaH/2 > height){      // nie moze uciec poza dolna krawedz
   paletkaYL= paletkaYL-paletkaS; 
  }
    if(paletkaYR-paletkaH/2 <0){            
   paletkaYR= paletkaYR + paletkaS; 
  }
  if(paletkaYR+paletkaH/2 > height){
   paletkaYR= paletkaYR-paletkaS; 
  }
}

 public void odbiciaPaletka(){            // metoda ktora umozliwia odbicia paletkami
  if(x-w/2<paletkaXL + paletkaW/2 && y-h/2 < paletkaYL+paletkaH/2 && y+h/2 > paletkaYL-paletkaH/2){      // mozliwosc odbicia lewa paletka
   if(speedX<0){            // pilka nie blokuje sie jakby pod paletka
    speedX=-speedX;
   }
  }
    else if(x+w/2>paletkaXR - paletkaW/2 && y-h/2 < paletkaYR+paletkaH/2 && y+h/2 > paletkaYR-paletkaH/2){        // mozliwosc odbicia prawa paletka
   if(speedX>0){
      speedX=-speedX; 
  }
    }
}

 public void wynik(){        // wyswietlanie wyniku
  fill(255);
  text(wynikL, 100,50);
  text(wynikR, width-100,50);
  text("Gra do " + koniec+ " pkt",250,5);
}

 public void koncowyWynik(){          // ustawienie wyniku koncowego
 if(wynikL==koniec){
   koniecGry("Lewa strona wygrala");
 }
 if(wynikR==koniec){
   koniecGry("Prawa strona wygrala");
 }
}



 public void koniecGry(String koniec){
  
  speedX=0;
  speedY=0;
  
  text("Koniec gry", width/2,height/3-40);
  text(koniec, width/2,height/3);
  text("Nacisnij LPM by zagrac ponownie", width/2, height/3+40);
  if(mousePressed){
    wynikL=0;        
    wynikR=0;
    speedX=2;
    speedY=3;
  }
}


 public void keyPressed(){                // ruchy paletkami
  if(key == 'w' || key == 'W'){
   upL = true; 
  }  
  if(key == 's' || key == 'S'){
   downL = true; 
  }
    if(keyCode == UP){
   upR = true; 
  }  
  if(keyCode == DOWN){
   downR = true; 
  }
}

 public void keyReleased(){
    if(key == 'w' || key == 'W'){
   upL = false; 
  }  
  if(key == 's' || key == 'S'){
   downL = false; 
  }
     if(keyCode == UP){
   upR = false; 
  }  
  if(keyCode == DOWN){
   downR = false; 
  }
}


  public void settings() { size(500, 500); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "Kamil_Polacik" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
